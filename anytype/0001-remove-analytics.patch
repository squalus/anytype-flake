From c4af6198b1dd065acef4c2287e0af9de45e7715c Mon Sep 17 00:00:00 2001
From: squalus <squalus@squalus.net>
Date: Mon, 29 Jan 2024 09:39:15 -0800
Subject: [PATCH 1/2] remove analytics

---
 electron/hook/afterpack.js   | 21 ++-------------------
 src/ts/app.tsx               | 23 -----------------------
 src/ts/lib/analytics.ts      | 24 ++----------------------
 src/ts/lib/api/dispatcher.ts |  3 ---
 src/ts/lib/util/data.ts      |  3 ---
 5 files changed, 4 insertions(+), 70 deletions(-)

diff --git a/electron/hook/afterpack.js b/electron/hook/afterpack.js
index 1d8f72a62a..b1b303f9b3 100644
--- a/electron/hook/afterpack.js
+++ b/electron/hook/afterpack.js
@@ -1,21 +1,4 @@
-const SentryCli = require('@sentry/cli');
-const cli = new SentryCli();
-
 exports.default = async function (context) {
-	if (process.env.ELECTRON_SKIP_SENTRY) {
-		return;
-	};
-
-	cli.releases.options = {
-		url: 'https://sentry.anytype.io',
-		authToken: process.env.SENTRY_AUTH_TOKEN,
-		logLevel: 'debug',
-		org: 'anytype',
-		project: 'desktop',
-		silent: false,
-	};
+	return;
+};
 
-	return await cli.releases.uploadSourceMaps(context.packager.appInfo.version, { 
-		include: [ '../../dist/js/main.js.map' ],
-	});
-};
\ No newline at end of file
diff --git a/src/ts/app.tsx b/src/ts/app.tsx
index 9906d6c82c..5913b6df86 100644
--- a/src/ts/app.tsx
+++ b/src/ts/app.tsx
@@ -1,6 +1,5 @@
 import * as React from 'react';
 import * as hs from 'history';
-import * as Sentry from '@sentry/browser';
 import $ from 'jquery';
 import raf from 'raf';
 import { RouteComponentProps } from 'react-router';
@@ -96,28 +95,6 @@ enableLogging({
 });
 */
 
-Sentry.init({
-	release: electron.version.app,
-	environment: isPackaged ? 'production' : 'development',
-	dsn: J.Constant.sentry,
-	maxBreadcrumbs: 0,
-	beforeSend: (e: any) => {
-		e.request.url = '';
-		return e;
-	},
-	integrations: [
-		new Sentry.Integrations.GlobalHandlers({
-			onerror: true,
-			onunhandledrejection: true,
-		}),
-	],
-});
-
-Sentry.setContext('info', {
-	network: I.NetworkMode[S.Auth.networkConfig?.mode],
-	isPackaged: isPackaged,
-});
-
 class RoutePage extends React.Component<RouteComponentProps> {
 
 	render () {
diff --git a/src/ts/lib/analytics.ts b/src/ts/lib/analytics.ts
index ae66080990..dfeac91041 100644
--- a/src/ts/lib/analytics.ts
+++ b/src/ts/lib/analytics.ts
@@ -1,4 +1,3 @@
-import * as amplitude from 'amplitude-js';
 import { I, C, S, U, J, Relation } from 'Lib';
 
 const KEYS = [ 
@@ -8,7 +7,7 @@ const KEYS = [
 	'processor', 'emptyType', 'status', 'sort', 'widgetType', 'origin', 'apiAppName', 'unreadMessageCount', 'hasMentions',
 	'uxType',
 ];
-const URL = 'amplitude.anytype.io';
+const URL = '127.0.0.1';
 
 class Analytics {
 	
@@ -115,8 +114,7 @@ class Analytics {
 	 * @returns {boolean} True if analytics is allowed.
 	 */
 	isAllowed (): boolean {
-		const { config } = S.Common;
-		return !(config.sudo || !U.Common.getElectron().isPackaged) || this.debug();
+		return false;
 	};
 	
 	/**
@@ -133,19 +131,6 @@ class Analytics {
 		const platform = U.Common.getPlatform();
 		const hasDefaultPath = electron.userPath() == electron.defaultPath();
 
-		this.instance = amplitude.getInstance();
-		this.instance.init(J.Constant.amplitude, null, Object.assign({
-			apiEndpoint: URL,
-			batchEvents: true,
-			saveEvents: true,
-			includeUtm: true,
-			includeReferrer: true,
-			platform,
-			trackingOptions: {
-				ipAddress: false,
-			},
-		}, options || {}));
-
 		const props: any = { 
 			deviceType: 'Desktop',
 			platform,
@@ -154,11 +139,6 @@ class Analytics {
 			releaseChannel: config.channel,
 		};
 
-		if (electron.version) {
-			props.osVersion = electron.version.os;
-			this.instance.setVersionName(electron.version.app);
-		};
-
 		this.setProperty(props);
 		this.removeContext();
 		this.setVersion();
diff --git a/src/ts/lib/api/dispatcher.ts b/src/ts/lib/api/dispatcher.ts
index f9454ac0c6..aa42057309 100644
--- a/src/ts/lib/api/dispatcher.ts
+++ b/src/ts/lib/api/dispatcher.ts
@@ -1,4 +1,3 @@
-import * as Sentry from '@sentry/browser';
 import $ from 'jquery';
 import arrayMove from 'array-move';
 import { observable, set } from 'mobx';
@@ -338,7 +337,6 @@ class Dispatcher {
 
 					if (!isSync && (id == focus.state.focused)) {
 						console.error('[Dispatcher] BlockSetText: focus', id);
-						Sentry.captureMessage('[Dispatcher] BlockSetText: focus');
 					};
 
 					const content: any = {};
@@ -1312,7 +1310,6 @@ class Dispatcher {
 					console.error('Error', type, 'code:', message.error.code, 'description:', message.error.description);
 
 					if (!SKIP_SENTRY_ERRORS.includes(type)) {
-						Sentry.captureMessage(`${type}: code: ${code} msg: ${message.error.description}`);
 						analytics.event('Exception', { method: type, code: message.error.code });
 					};
 
diff --git a/src/ts/lib/util/data.ts b/src/ts/lib/util/data.ts
index 460b503b3f..246b45e2ba 100644
--- a/src/ts/lib/util/data.ts
+++ b/src/ts/lib/util/data.ts
@@ -1,4 +1,3 @@
-import * as Sentry from '@sentry/browser';
 import { I, C, M, S, J, U, keyboard, translate, Storage, analytics, dispatcher, Mark, focus, Renderer, Action, Relation } from 'Lib';
 
 /**
@@ -219,8 +218,6 @@ class UtilData {
 		S.Common.spaceSet(info.accountSpaceId);
 		S.Common.getRef('vault')?.setActive(info.spaceViewId);
 
-		analytics.profile(info.analyticsId, info.networkId);
-		Sentry.setUser({ id: info.analyticsId });
 	};
 	
 	/**
-- 
2.49.0

